[

    {token_keeper, [

        {ip, "::"},
        {port, 8022},
        {services, #{
            token_keeper => #{
                path => <<"/v1/token-keeper">>
            }
        }},
        {protocol_opts, #{
            % How much to wait for another request before closing a keepalive connection? (ms)
            request_timeout => 5000
        }},
        {transport_opts, #{
            % Maximum number of simultaneous connections. (default = 1024)
            max_connections => 8000,
            % Size of the acceptor pool. (default = 10)
            num_acceptors => 100
        }},
        % How much to wait for outstanding requests completion when asked to shut down? (ms)
        {shutdown_timeout, 1000},

        {woody_event_handlers, [
            hay_woody_event_handler,
            {scoper_woody_event_handler, #{
                event_handler_opts => #{
                    formatter_opts => #{
                        max_length => 1000,
                        max_printable_string_length => 80
                    }
                }
            }}
        ]},

        {health_check, #{
            % disk    => {erl_health, disk     , ["/", 99]},
            % memory  => {erl_health, cg_memory, [99]},
            % service => {erl_health, service  , [<<"bouncer">>]}
        }},

        {jwt, #{
            keyset => #{
                test => #{
                    source => {pem_file, "keys/local/private.pem"},
                    %% Who is the authority for this token
                    authority => keycloak
                }
            }
        }},

        %% Authority configuration
        {authorities, #{
            keycloak => #{
                %% What to use as authority id string
                id => <<"test.rbkmoney.keycloak">>
                %% Where to fetch authdata for tokens issued by this authority
                authdata_sources => [
                    %% Fetch from service storage
                    storage,
                    %% Extract bouncer context from the token itself and make up the rest
                    {extract, #{
                        %% Configuration for how to extract said context
                        methods => [
                            %% Extract bouncer context from claim
                            claim,
                            %% Create bouncer context from various legacy data the token has to offer
                            %% Avaiable options are: `api_key_token`, `user_session_token`, `detect_token`
                            %%  `user_session_token` requires the `user_realm` option to be set
                            %%  `detect_token` tries to determine wether the token is an
                            %%    `api_key_token` or `user_session_token` based on token's source context and
                            %%    `user_session_token_origins` option
                            {detect_token, #{
                                user_session_token_origins => [<<"http://localhost">>],
                                user_realm => <<"external">>
                            }}
                        ],
                        %% What to use as metadata namespace
                        metadata_ns => <<"test.rbkmoney.token-keeper">>
                    }}
                ]
            }
        }}

    ]},

    {kernel, [
        {logger_level, debug},
        {logger, [
            {handler, default, logger_std_h, #{
                config => #{
                    type => {file, "/var/log/token-keeper/log.json"}
                },
                formatter => {logger_logstash_formatter, #{}}
            }}
        ]}
    ]},

    % {how_are_you, [
    %     {metrics_publishers, [
    %         {hay_statsd_publisher, #{
    %             key_prefix => <<"bender.">>,
    %             host => "localhost",
    %             port => 8125
    %         }}
    %     ]}
    % ]},

    {scoper, [
        {storage, scoper_storage_logger}
    ]},

    {snowflake, [
        {max_backward_clock_moving, 1000}  % 1 second
        % {machine_id, hostname_hash}
    ]}

].
